plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.5'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	//lombok 라이브러리 추가 시작
	implementation 'org.projectlombok:lombok:1.18.30'
	annotationProcessor 'org.projectlombok:lombok:1.18.30'

	testImplementation 'org.projectlombok:lombok:1.18.30'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'

	// 웹
	implementation 'org.springframework.boot:spring-boot-starter-web'

	//JPA
	implementation('org.springframework.boot:spring-boot-starter-data-jpa')
	implementation('com.h2database:h2')

	//머스테치
	implementation 'org.springframework.boot:spring-boot-starter-mustache'

	// swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

	//Querydsl
	// query dsl 버전 명시해야 jakarta사용 (javax X)
	implementation 'com.querydsl:querydsl-apt:5.0.0'
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	implementation 'com.querydsl:querydsl-core:5.0.0'

	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"

	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// 필수값 검증
	implementation 'org.springframework.boot:spring-boot-starter-validation:2.3.0.RELEASE'

	// Spring Cloud Config Client (Config Server에서 설정 가져오기)
	implementation 'org.springframework.cloud:spring-cloud-starter-config:4.1.5'

}

// spring cloud 를 위해 config client
ext {
	set('springCloudVersion', "2023.0.1")
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}


tasks.named('test') {
	useJUnitPlatform()
}

// Querydsl 빌드 옵션 설정
def generated = 'src/main/generated'

// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile) {
	options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
	main.java.srcDirs += [ generated ]
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
	delete file(generated)
}
